@page "/manage-tasks"
@inject HttpClient Http
@inject ITaskDataService taskDataService
@inject IMemberDataService memberDataService
@using FamilyTask.Components
@using FamilyTask.Shared.Components
@using WebClient.Abstractions
@using Domain.ViewModel
@using Microsoft.JSInterop
@using Domain.Commands
@using WebClient.Exentions
@inject IJSRuntime JSRuntime

@if (isLoaded)
{
    <div class="page-wrapper row m-0 col-12 p-0">
        <div class="col-4 p-0">
            <LeftMenu TaskAssignedCallback="@TaskAssinged_OnDrop" MenuItems="@leftMenuItem" OnAddItem="@onAddItem" />
        </div>
        <div class="col-8 p-0">
            @if (showLister)
            {
                <div class="col-10 offset-1 pt-5">
                    <EditForm Model="@newTask" OnValidSubmit="@HandleValidSubmit">

                        <div class="row m-0">

                            <DataAnnotationsValidator />

                            <InputText @bind-Value="@newTask.AssignedMemberId" type="hidden"></InputText>

                            <Field class="col-9 p-0 custom-input">
                                <InputText class="form-control" id="subject" @bind-Value="@newTask.Subject" placeholder="Enter New Task"></InputText>
                            </Field>
                            <div class="col-3 p-0 text-right">
                                <button type="submit" class="add-btn px-4">Add</button>
                            </div>

                        </div>
                    </EditForm>


                </div>
                <div class="col-10 offset-1">
                    <TaskListerComponent Tasks="@tasksToShow" />
                </div>
            }
            @if (showCreator)
            {
                <div class="col-10 offset-1 pt-5">
                    <FamilyMemberCreator onAddCallback="@onMemberAdd" />
                </div>
            }
        </div>
    </div>
}

@code {
    private FamilyMember[] members;
    private MenuItem[] leftMenuItem;
    private TaskModel[] tasksToShow;
    private TaskModel[] allTasks;
    public NewTask newTask = new NewTask { AssignedMemberId = "", Subject = "" };
    private bool isLoaded;
    private bool showLister;
    private bool showCreator;

    protected override async Task OnInitializedAsync()
    {
        // members = await Http.GetFromJsonAsync<FamilyMember[]> ("sample-data/family-members.json");
        //  allTasks = await  Http.GetFromJsonAsync<TaskModel[]> ("sample-data/tasks.json");
        members = await memberDataService.GetAllMembersList();

        allTasks = await taskDataService.GetAllTask();

        SetLeftMenuItems(members);

        showAllTasks(null, leftMenuItem[0]);
        isLoaded = true;
    }

    private void SetLeftMenuItems(FamilyMember[] members)
    {

        leftMenuItem = new MenuItem[members.Length + 1];
        leftMenuItem[0] = new MenuItem
        {
            label = "All Tasks",
            referenceId = Guid.Empty,
            isActive = true
        };
        leftMenuItem[0].ClickCallback += showAllTasks;
        for (int i = 1; i < members.Length + 1; i++)
        {
            leftMenuItem[i] = new MenuItem
            {
                iconColor = members[i - 1].avtar,
                label = members[i - 1].firstname,
                referenceId = members[i - 1].id,
                isActive = false
            };
            leftMenuItem[i].ClickCallback += onItemClick;
        }
    }


    private void onAddItem()
    {
        showLister = false;
        showCreator = true;
        makeMenuItemActive(null);
        StateHasChanged();
    }

    private async Task TaskAssinged_OnDrop(TaskMemberVm vm)
    {
        //   var taskList = tasksToShow.ToList();

        var newTaskMember = members.First(u => u.id == vm.MemberId);

        var taskFromAllTaskUpdated = allTasks.First(u => u.id == vm.TaskId);

        taskFromAllTaskUpdated.member = newTaskMember;

        if (Guid.TryParse(newTask.AssignedMemberId, out Guid selectedMemberId))
        {
            tasksToShow = allTasks.Where(item =>
            {
                if (item.member != null)
                {
                    return item.member.id == selectedMemberId;
                }
                else
                {
                    return false;
                }
            }).ToArray();
        }
        else
        {
            tasksToShow = allTasks;
        }

        StateHasChanged();
    }

    protected async Task HandleValidSubmit()
    {
        var result = await taskDataService.CreateTask(newTask);

        var taskList = tasksToShow.ToList();

        taskList.Add(result);

        tasksToShow = taskList.ToArray();

        var allTaskList = allTasks.ToList();

        allTaskList.Add(result);

        allTasks = allTaskList.ToArray();

        newTask.Subject = "";

        StateHasChanged();


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {


        await JSRuntime.InvokeVoidAsync("RefreshTaskForDraging");


    }


    private void onItemClick(object sender, object e)
    {
        Guid val = (Guid)e.GetType().GetProperty("referenceId").GetValue(e);
        makeMenuItemActive(e);
        if (allTasks != null && allTasks.Length > 0)
        {
            tasksToShow = allTasks.Where(item =>
            {
                if (item.member != null)
                {
                    return item.member.id == val;
                }
                else
                {
                    return false;
                }
            }).ToArray();
        }
        showLister = true;
        showCreator = false;
        newTask.AssignedMemberId = val.ToString();
        StateHasChanged();
    }
    private void showAllTasks(object sender, object e)
    {
        tasksToShow = allTasks;
        showLister = true;
        showCreator = false;
        newTask.AssignedMemberId = string.Empty;
        makeMenuItemActive(e);
        StateHasChanged();
    }

    private void makeMenuItemActive(object e)
    {
        foreach (var item in leftMenuItem)
        {
            item.isActive = false;
        }
        if (e != null)
        {
            e.GetType().GetProperty("isActive").SetValue(e, true);
        }
    }

    private async Task onMemberAdd(FamilyMember member)
    {
        CreateMemberCommand
            newMember = member.Map();

        var result = await memberDataService.Create(newMember);

        var memberList = members.ToList();

        memberList.Add(result.Map());

        members = memberList.ToArray();

        SetLeftMenuItems(members);

        Console.WriteLine("on member add",member);

        showCreator = false;
        showLister = true;

        StateHasChanged();
    }
}